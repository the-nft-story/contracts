name: Educational Smart Contract Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/**'
      - 'test/**'
      - 'script/**'
      - 'foundry.toml'
      - 'remappings.txt'
  workflow_dispatch:
    inputs:
      educational_focus:
        description: 'Educational focus area'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - security-patterns
        - gas-optimization
        - testing-strategies
        - solidity-patterns
        - erc-standards

env:
  FOUNDRY_PROFILE: ci

jobs:
  educational-review:
    name: Claude Educational Smart Contract Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: forge install

      - name: Build contracts
        run: forge build

      - name: Run tests with gas report
        run: forge test --gas-report
        continue-on-error: true

      - name: Generate coverage report
        run: forge coverage --report summary
        continue-on-error: true

      - name: Educational Smart Contract Review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: |
            # Educational Smart Contract Review - Contracts Repository

            You are conducting a comprehensive educational review of smart contract code
            for "The NFT Story" contracts repository. Focus on teaching advanced Solidity
            patterns, security principles, and smart contract best practices.

            ## Educational Review Framework

            ### 1. Smart Contract Architecture Analysis

            #### Contract Design Patterns
            - **Inheritance Hierarchies**: Analyze contract relationships and diamond patterns
            - **State Management**: Review storage layouts, packing, and gas implications
            - **Interface Design**: Evaluate external function signatures and ABI considerations
            - **Modularity**: Assess separation of concerns and contract composition

            #### Solidity Language Mastery
            - **Modern Features**: Usage of custom errors, events, modifiers, and libraries
            - **Assembly Optimization**: When and how to use inline assembly safely
            - **Memory vs Storage**: Efficient data structure choices and gas implications
            - **Function Visibility**: Proper access control and external interface design

            ### 2. Security Education Deep Dive

            #### Vulnerability Pattern Recognition
            - **Reentrancy**: CEI pattern implementation and reentrancy guard usage
            - **Integer Arithmetic**: SafeMath evolution and overflow protection in 0.8+
            - **Access Control**: Role-based permissions and privilege escalation prevention
            - **External Calls**: Safe interaction patterns with untrusted contracts

            #### Attack Vector Analysis
            For each potential vulnerability:
            - **Historical Context**: Reference real-world exploits (DAO hack, Parity bugs, etc.)
            - **Exploit Mechanics**: Step-by-step attack scenario explanation
            - **Detection Methods**: How automated tools and manual review catch these
            - **Prevention Strategies**: Multiple mitigation approaches with trade-offs
            - **Testing Approaches**: Specific test cases to verify security

            ### 3. Gas Optimization Education

            #### Storage Optimization Techniques
            - **Variable Packing**: Struct layout optimization and slot utilization
            - **Storage vs Memory**: When to use each and gas cost implications
            - **State Variable Access**: Gas costs of different access patterns
            - **Event vs Storage**: Trade-offs between on-chain storage and event logs

            #### Execution Optimization
            - **Loop Optimization**: Gas-efficient iteration patterns
            - **Function Call Costs**: Internal vs external vs delegate calls
            - **Bytecode Analysis**: Understanding compiler optimizations
            - **Batch Operations**: Reducing transaction costs through batching

            ### 4. Testing Strategy Mastery

            #### Foundry Testing Patterns
            - **Unit Test Architecture**: Proper test structure and organization
            - **Fuzzing Strategies**: Property-based testing for edge case discovery
            - **Integration Testing**: Cross-contract interaction testing
            - **Fork Testing**: Mainnet state testing and simulation

            #### Advanced Testing Concepts
            - **Invariant Testing**: System-wide property verification
            - **Differential Testing**: Comparing implementations for equivalence
            - **Gas Benchmarking**: Performance regression testing
            - **Security Testing**: Automated vulnerability detection

            ### 5. ERC Standard Implementation

            #### ERC-721 Deep Dive
            - **Standard Compliance**: Required functions and their proper implementation
            - **Extension Patterns**: Common extensions (Enumerable, URI Storage, etc.)
            - **Metadata Handling**: On-chain vs off-chain metadata strategies
            - **Transfer Hooks**: Safe transfer patterns and callback security

            #### Custom Standards Design
            - **Interface Design**: Creating clean, efficient external interfaces
            - **Backward Compatibility**: Maintaining compatibility across versions
            - **Interoperability**: Ensuring contracts work with existing ecosystem
            - **Documentation**: Proper NatSpec and technical documentation

            ## Educational Output Format

            ### 📚 Learning Objectives Summary
            Key educational goals achieved in this review

            ### 🔍 Technical Deep Dive
            Detailed analysis of implementation patterns with explanations

            ### 🛡️ Security Patterns Identified
            Security implementations with vulnerability prevention analysis

            ### ⛽ Gas Optimization Opportunities
            Performance improvements with educational context

            ### 🧪 Testing Strategy Assessment
            Test coverage analysis and improvement suggestions

            ### 💡 Advanced Concepts Explored
            Sophisticated patterns and their educational value

            ### 🎯 Learning Challenges
            Advanced exercises to deepen understanding

            ### 📖 Recommended Resources
            Further reading and learning materials

            ## Project-Specific Educational Focus

            ### The NFT Story Contract Architecture
            - **Append-Only Design**: Why this pattern over alternatives
            - **Fixed Pricing**: Economic implications and attack resistance
            - **Community Ownership**: Decentralization principles in practice
            - **On-Chain Storage**: Trade-offs vs IPFS and other solutions

            ### Real-World Application Learning
            - **Deployment Strategies**: From testnet to mainnet considerations
            - **Upgrade Patterns**: Immutable vs proxy patterns for this use case
            - **Integration Patterns**: How these contracts fit in the broader ecosystem
            - **Monitoring and Maintenance**: Post-deployment considerations

            ## Advanced Educational Questions

            ### Architecture Design
            - Why was this storage pattern chosen over mapping-based alternatives?
            - How does this design scale with thousands of participants?
            - What are the economic incentives and how do they align with security?

            ### Security Analysis
            - What attack vectors are specific to this storytelling model?
            - How does the fixed pricing model affect front-running risks?
            - What are the implications of immutable contract design?

            ### Gas Economics
            - How do gas costs affect user adoption and story participation?
            - What optimizations maintain security while reducing costs?
            - How does the append-only pattern affect long-term gas usage?

            ### Testing Philosophy
            - What edge cases are unique to this application domain?
            - How do we test community behavior and economic incentives?
            - What fuzzing strategies work best for storytelling contracts?

            Focus on creating a comprehensive learning experience that advances both
            smart contract expertise and understanding of decentralized application design!

      - name: Generate Educational Report
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          script: |
            // Get PR details for educational context
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Analyze changed files for learning focus
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const contractFiles = files.filter(f => f.filename.startsWith('src/') && f.filename.endsWith('.sol')).length;
            const testFiles = files.filter(f => f.filename.startsWith('test/') && f.filename.endsWith('.sol')).length;
            const scriptFiles = files.filter(f => f.filename.startsWith('script/')).length;

            // Determine learning focus areas
            let focusAreas = [];
            if (contractFiles > 0) focusAreas.push('Smart Contract Implementation');
            if (testFiles > 0) focusAreas.push('Testing Strategies');
            if (scriptFiles > 0) focusAreas.push('Deployment & Scripting');

            // Calculate review scope
            const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
            const complexity = totalChanges > 200 ? 'High' : totalChanges > 50 ? 'Medium' : 'Low';

            const educationalReport = `## 🎓 Educational Smart Contract Review

            ### 📊 Learning Analysis
            - **Files Changed**: ${files.length} (${contractFiles} contracts, ${testFiles} tests, ${scriptFiles} scripts)
            - **Total Changes**: ${totalChanges} lines
            - **Complexity Level**: ${complexity}
            - **Focus Areas**: ${focusAreas.join(', ') || 'General Development'}

            ### 🎯 Educational Objectives
            This review helps you master:
            ${focusAreas.map(area => `- ${area} patterns and best practices`).join('\n')}

            ### 🔬 Analysis Scope
            **Smart Contract Deep Dive**: Solidity patterns, security implications, and gas optimization
            **Testing Mastery**: Foundry testing strategies and comprehensive coverage
            **Security Education**: Vulnerability patterns and prevention strategies

            ### 🚀 Learning Outcomes
            By reviewing Claude's detailed feedback above, you'll gain understanding of:
            - Advanced Solidity development patterns
            - Smart contract security principles
            - Gas optimization techniques
            - Professional testing strategies
            - Industry best practices and standards

            📖 **Detailed educational analysis provided by Claude above** - review carefully for deep learning insights!

            💡 **Next Learning Steps**: Implement suggested improvements and explore the recommended resources for continued growth.

            🎯 **Challenge**: Try to implement the suggested advanced patterns and test your understanding!
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: educationalReport
            });