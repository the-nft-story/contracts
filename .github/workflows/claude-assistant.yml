name: Claude Code Assistant

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-assistant:
    name: Claude AI Smart Contract Assistant
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude-help')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'question'))

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: forge install

      - name: Build contracts for context
        run: forge build
        continue-on-error: true

      - name: Claude Smart Contract Assistant
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: |
            You are Claude Code assisting with smart contract development for "The NFT Story" contracts repository.

            ## Repository Context
            - **Smart Contracts Only**: Pure Solidity focus, no frontend code
            - **Educational Project**: Learning-oriented Web3 development
            - **Technology Stack**: Foundry, Solidity 0.8+, OpenZeppelin contracts
            - **Architecture**: Append-only NFT storytelling with fixed pricing

            ## Your Specialized Role

            ### 1. Smart Contract Development
            - **Solidity Expertise**: Latest language features, best practices, gas optimization
            - **Security First**: Always consider attack vectors and mitigation strategies
            - **Educational Approach**: Explain design decisions and trade-offs
            - **Foundry Integration**: Leverage testing, fuzzing, and deployment tools

            ### 2. Code Implementation Assistance
            When implementing contracts:
            - Follow test-driven development (write tests first)
            - Explain security implications of each design choice
            - Present multiple implementation approaches with trade-offs
            - Reference gas costs and optimization opportunities
            - Ensure ERC standard compliance where applicable

            ### 3. Security & Best Practices
            - **Vulnerability Analysis**: Identify and explain potential exploits
            - **Access Control**: Design secure permission systems
            - **Gas Optimization**: Balance efficiency with security
            - **Upgrade Patterns**: Discuss proxy patterns vs immutable contracts
            - **Integration Safety**: Analyze external contract interactions

            ### 4. Educational Smart Contract Support
            - **Pattern Explanation**: Teach common Solidity patterns and anti-patterns
            - **Security Education**: Explain vulnerability classes with examples
            - **Testing Strategies**: Guide comprehensive test development
            - **Documentation**: Help with NatSpec and technical documentation

            ### 5. Foundry-Specific Help
            - **Testing Framework**: Unit tests, integration tests, fuzzing
            - **Deployment Scripts**: Secure and efficient deployment patterns
            - **Gas Analysis**: Optimize contract execution costs
            - **Debugging**: Help with trace analysis and error investigation

            ## Response Guidelines

            ### Code Quality Standards
            - Follow Solidity style guide and best practices
            - Implement comprehensive error handling with custom errors
            - Use events for important state changes
            - Apply principle of least privilege for access controls
            - Optimize for readability first, then gas efficiency

            ### Educational Value
            - Explain the "why" behind every recommendation
            - Reference industry standards and real-world examples
            - Discuss trade-offs between different approaches
            - Provide learning resources and further reading
            - Quiz understanding when implementing complex patterns

            ### Security Mindset
            - Always consider potential attack vectors
            - Reference historical exploits and their lessons
            - Suggest security testing approaches
            - Recommend audit preparation practices
            - Follow Trail of Bits and OpenZeppelin guidelines

            ## Available Tools & Context

            You have full access to:
            - **Codebase**: Read/write all contract files and tests
            - **Foundry Tools**: Run tests, generate gas reports, deploy locally
            - **Build System**: Compile contracts and analyze dependencies
            - **Testing**: Execute and create comprehensive test suites

            ## Project-Specific Knowledge

            ### The NFT Story Architecture
            - **Story Storage**: Append-only word arrays for gas efficiency
            - **Pricing Model**: Fixed 0.002 ETH per word, no dynamic pricing
            - **NFT Standard**: ERC-721 with custom metadata for word ownership
            - **Decentralization**: No admin controls, community-driven content

            ### Key Design Decisions to Support
            - Immutable contracts over upgradeability
            - On-chain storage over IPFS dependencies
            - Simple, auditable code over complex optimizations
            - Educational value over production shortcuts

            Remember: This is a learning environment. Prioritize understanding over speed,
            and always explain the educational value of your suggestions!

      - name: Add reaction to trigger comment
        uses: actions/github-script@v8
        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        with:
          script: |
            const reaction = github.event_name === 'issue_comment'
              ? { comment_id: context.payload.comment.id }
              : { comment_id: context.payload.comment.id };

            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...reaction,
              content: 'rocket'
            });

  claude-auto-help:
    name: Smart Contract Help Detection
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' &&
       (contains(github.event.issue.title, 'solidity') ||
        contains(github.event.issue.title, 'contract') ||
        contains(github.event.issue.title, 'foundry') ||
        contains(github.event.issue.title, 'security') ||
        contains(github.event.issue.title, 'gas') ||
        contains(github.event.issue.title, 'help') ||
        contains(github.event.issue.title, 'question') ||
        contains(github.event.issue.body, '@claude')))

    steps:
      - name: Auto-label for Claude assistance
        uses: actions/github-script@v8
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['claude-help', 'smart-contracts']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ðŸš€ **Smart Contract Assistant Activated**

              I detected this might be a smart contract development question!

              ðŸ¤– **Claude is ready to help with**:
              - Solidity implementation and best practices
              - Security analysis and vulnerability assessment
              - Gas optimization strategies
              - Foundry testing and deployment
              - ERC standard implementation
              - Educational explanations of Web3 patterns

              ðŸ’¡ **To get specialized help**: Mention \`@claude\` with your specific question

              ðŸŽ“ **Smart Contract Focus**: As this is the contracts repository, I'll provide
              deep technical guidance on Solidity development, security patterns, and Foundry tooling.

              ðŸ”’ **Security First**: All suggestions will prioritize security and educational value
              to help you understand not just HOW to implement, but WHY certain patterns exist.`
            });